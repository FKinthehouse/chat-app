<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Chat App" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <% if user_signed_in? %>
      <meta name="current-user-id" content="<%= current_user.id %>">
      <meta name="user-chat-ids" content="<%= current_user.chats.pluck(:id).join(',') %>">
    <% end %>

    <%= yield :head %>

    <!-- Simple favicon setup that works across browsers -->
    <link rel="shortcut icon" href="/icon.png">
    <link rel="icon" href="/icon.png">
    
    <!-- Apple Touch Icons - Safari -->
    <link rel="apple-touch-icon" href="/apple-touch-icon.png">
    
    <!-- Web app manifest -->
    <link rel="manifest" href="/manifest.json">
    
    <!-- Set theme color for browser UI -->
    <meta name="theme-color" content="#4f46e5">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    
    <%= stylesheet_link_tag "tailwind", "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    
    <!-- Rails UJS for AJAX form submissions -->
    <script src="https://cdn.jsdelivr.net/npm/@rails/ujs@7.0.1/lib/assets/compiled/rails-ujs.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        if (typeof Rails !== 'undefined') {
          Rails.start();
          console.log("Rails UJS loaded and started");
        } else {
          console.error("Rails UJS failed to load");
        }
      });
    </script>
    
    <!-- Emoji Picker Element -->
    <script src="https://cdn.jsdelivr.net/npm/emoji-picker-element@1.26.3/index.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/emoji-picker-element@1.26.3/css/emoji-picker.css">
    
    <!-- Import chat members management -->
    <%= javascript_import_module_tag "chat_members" %>
    
    <style>
      /* Ensure emoji picker is visible */
      emoji-picker {
        visibility: visible !important;
        opacity: 1 !important;
        z-index: 9999 !important;
        background-color: white !important;
      }
      
      emoji-picker.hidden {
        display: none !important;
      }
    </style>
  </head>

  <body class="bg-gray-100" <%= "data-current-user-id=#{current_user.id}" if user_signed_in? %>>
    <%= render 'shared/navbar' if user_signed_in? %>
    
    <div class="container mx-auto mt-4 px-4">
      <% if notice %>
        <div id="notice-alert" class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
          <span class="block sm:inline"><%= notice %></span>
          <button type="button" class="absolute top-0 bottom-0 right-0 px-4 py-3" onclick="closeAlert('notice-alert')">
            <svg class="fill-current h-6 w-6 text-green-500" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Close</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/></svg>
          </button>
        </div>
      <% end %>
      
      <% if alert %>
        <div id="alert-alert" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
          <span class="block sm:inline"><%= alert %></span>
          <button type="button" class="absolute top-0 bottom-0 right-0 px-4 py-3" onclick="closeAlert('alert-alert')">
            <svg class="fill-current h-6 w-6 text-red-500" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Close</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/></svg>
          </button>
        </div>
      <% end %>

      <main class="container mx-auto">
        <%= yield %>
      </main>
    </div>
    
    <script>
      // Auto-dismiss flash messages after 5 seconds
      document.addEventListener('DOMContentLoaded', function() {
        const noticeAlert = document.getElementById('notice-alert');
        const alertAlert = document.getElementById('alert-alert');
        
        if (noticeAlert) {
          setTimeout(function() {
            noticeAlert.style.opacity = '0';
            noticeAlert.style.transition = 'opacity 1s';
            setTimeout(function() { noticeAlert.style.display = 'none'; }, 1000);
          }, 5000);
        }
        
        if (alertAlert) {
          setTimeout(function() {
            alertAlert.style.opacity = '0';
            alertAlert.style.transition = 'opacity 1s';
            setTimeout(function() { alertAlert.style.display = 'none'; }, 1000);
          }, 5000);
        }
        
        // Request notification permission if the browser supports it
        if ("Notification" in window && Notification.permission !== "granted" && Notification.permission !== "denied") {
          // Wait a moment before requesting permission for better user experience
          setTimeout(function() {
            Notification.requestPermission().then(function(permission) {
              console.log("Notification permission:", permission);
            });
          }, 3000);
        }
      });
      
      function closeAlert(id) {
        const element = document.getElementById(id);
        if (element) {
          element.style.opacity = '0';
          element.style.transition = 'opacity 0.5s';
          setTimeout(function() { element.style.display = 'none'; }, 500);
        }
      }

      // Typing indicator fix - ensures it always works consistently
      document.addEventListener("DOMContentLoaded", fixTypingIndicator);
      document.addEventListener("turbo:load", fixTypingIndicator);
      document.addEventListener("turbo:frame-load", fixTypingIndicator);
      
      function fixTypingIndicator() {
        // Make sure the typing indicator element exists
        let typingIndicator = document.getElementById("typing-indicator");
        if (!typingIndicator && document.getElementById("messages")) {
          // Create it if it doesn't exist but messages container does
          typingIndicator = document.createElement("div");
          typingIndicator.id = "typing-indicator";
          typingIndicator.className = "text-gray-500 text-sm pl-4 italic hidden";
          typingIndicator.style.cssText = "margin-top: 8px; margin-bottom: 8px; font-style: italic; color: #6b7280;";
          
          const messagesContainer = document.getElementById("messages");
          if (messagesContainer.parentNode) {
            messagesContainer.parentNode.insertBefore(typingIndicator, messagesContainer.nextSibling);
          }
        }
        
        // Ensure typing event handlers are properly set up
        const messageInput = document.getElementById("message_content");
        if (messageInput && !messageInput._typingHandlerAttached) {
          // Track when typing was last sent
          let lastTypingTime = 0;
          let typingTimer;
          
          messageInput.addEventListener("input", function() {
            const now = Date.now();
            clearTimeout(typingTimer);
            
            // Only send typing notification if enough time has passed
            if (now - lastTypingTime > 2000) {
              lastTypingTime = now;
              
              // Try multiple ways to send the typing notification
              try {
                if (window.currentChatSubscription) {
                  window.currentChatSubscription.typing();
                } else if (window.consumer && window.consumer.subscriptions) {
                  // Find any chat subscription
                  const subs = window.consumer.subscriptions.subscriptions;
                  for (let i = 0; i < subs.length; i++) {
                    const sub = JSON.parse(subs[i].identifier);
                    if (sub.channel === "ChatChannel") {
                      window.consumer.subscriptions.subscriptions[i].typing();
                      break;
                    }
                  }
                }
              } catch (e) {
                console.log("Error sending typing notification:", e);
              }
            }
            
            typingTimer = setTimeout(() => {
              // Stop typing event
            }, 1000);
          });
          
          // Mark that we've attached the handler
          messageInput._typingHandlerAttached = true;
        }
      }
    </script>
  </body>
</html>
